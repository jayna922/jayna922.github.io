<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Jayna&#39;s Blog</title>
    <link>https://jayna922.github.io/blog/</link>
    <description>Recent content in Blogs on Jayna&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Tue, 24 Oct 2023 18:00:00 +0800</lastBuildDate><atom:link href="https://jayna922.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[靜態網站上線不求人]-如何在GitHub Pages上快速部署靜態網站</title>
      <link>https://jayna922.github.io/blog/code-github-page/</link>
      <pubDate>Tue, 24 Oct 2023 18:00:00 +0800</pubDate>
      
      <guid>https://jayna922.github.io/blog/code-github-page/</guid>
      <description>第一步: 先登入github帳號後,建立一個新的repo NEW(建立新的repo) 輸入專案的名稱,其他設定為預設即可 建立完成後,會看到以下畫面,複製起這串url 第二步: 建立好新的repo後,把repo下載到自己的電腦上 打開終端機 ::: 指令: cd desktop (進到桌面) 指令: git clone 網址 (下載專案,成功就會在桌面上看到所創的資料夾了) ::: 第三步: 將index.</description>
    </item>
    
    <item>
      <title>[用Nginx點燃你的Web伺服器]-nginx教學</title>
      <link>https://jayna922.github.io/blog/code-nginx/</link>
      <pubDate>Tue, 17 Oct 2023 18:00:00 +0800</pubDate>
      
      <guid>https://jayna922.github.io/blog/code-nginx/</guid>
      <description>第一步: 下載Nginx : 網頁連結 : https://nginx.org/en/download.html
1.進到網頁後,選取windows的最新版本下載
2.下載後打開檔案總管(會在下載的資料夾中會看到剛剛所下載的壓縮檔),將壓縮檔解壓縮
第二步: 啟動Nginx : 啟動的方式有兩種 : (擇一使用) 1.</description>
    </item>
    
    <item>
      <title>[用JavaScript的命名魔法：讓你的程式碼充滿活力]-變數命名規則</title>
      <link>https://jayna922.github.io/blog/code-name-rule/</link>
      <pubDate>Wed, 11 Oct 2023 18:00:00 +0800</pubDate>
      
      <guid>https://jayna922.github.io/blog/code-name-rule/</guid>
      <description>初期在開發程式時,在命名方法名稱或是命名變數名稱時, 時常煩惱不曉得如何下手命名, 自己也沒有一個規則性, 就依照當下的想法來命名, 加上經驗不足導致自己之後維護不容易需要再重新理解, 因此開始爬文各前輩分享的命名規則, 也順便將自己整理的筆記分享給大家~
養成一個好的變數命名習慣對於程式碼的可讀性及長期維護性會產生深遠的影響。 命名雖然沒有強制性，但在開發時基本上都會依照這套規則。 主要觀念 : 可讀性 : 經由命名可以直覺的理解此命名作用,盡量避免使用過簡短或縮寫的命名,導致閱讀性不易 (少寫簡寫 / 少寫自己發明的縮寫 / 少寫語意不明的命名) 維護性 : 若閱讀性高,將來再交接或維護上也會相對容易 一致性 : 使用相同的規則命名變數 / 在不同命名上使用對應不同的命名方式 (例如:駝峰式命名法/Snake Case 命名法…) 利用註解來說明你的程式碼 主要命名規則 : 1.</description>
    </item>
    
  </channel>
</rss>
