[{"categories":["技術文章"],"contents":" 第一步: 下載Nginx : 網頁連結 : https://nginx.org/en/download.html\n1.進到網頁後,選取windows的最新版本下載\n2.下載後打開檔案總管(會在下載的資料夾中會看到剛剛所下載的壓縮檔),將壓縮檔解壓縮\n第二步: 啟動Nginx : 啟動的方式有兩種 : (擇一使用) 1.使用cmd的方式 :\n(1)先打開cmd/命令提示字元\n(2)指令: cd nginx-1.25.2\\nginx (進入nginx資料夾)\n(3)指令: start nginx (啟動nginx) =\u0026gt; 會看到畫面閃一下(代表成功啟動)\n2.直接點擊檔案中的應用程式 :\n(1)進到nginx(C:\\Users\\Downloads\\nginx-1.25.2(1)\\nginx)這個路由下\n(2)找到nginx.exe後點擊兩下 =\u0026gt; 會看到畫面閃一下(代表成功啟動)\n第三步: 驗證Nginx是否啟動 : 成功: 直接到網頁上輸入這個網址 : 127.0.0.1 看到以下畫面就代表成功開啟nginx\n失敗: 可以打開工作管理員找一下是否開啟太多次nginx\n(有時候沒有停止上次執行的nginx又再啟動時也會出現這樣問題)\n可以嘗試先全部停止工作\n再執行第三步驟一次\n第四步: 如何設定讓打包的專案透過nginx開啟 : 1.將打包後的專案放到html資料夾中(C:\\Users\\Downloads\\nginx-1.25.2(1)\\nginx\\html)這個目錄底下\n2.到conf資料夾中找到nginx.conf檔案(C:\\Users\\mds_nb\\Downloads\\nginx-1.25.2(1)\\nginx\\conf)\n3.編輯nginx.conf\n(1)將預設port是80,可以改成自己想要的port\n(2)在root的地方 將位置指向專案的目錄下(04是我打包出來的專案)\n!注意! 一定要從html開始往下接續 (html/players/04) 第五步: 常用的nginx指令 : ➼ 啟動指令：start nginx\n➼ 停止指令：nginx -s stop\n➼ 重啟指令：nginx -s reload\n➼ 測試Nginx的設定檔並顯示狀態指令: nginx -t\n","permalink":"https://jayna922.github.io/blog/code-nginx/","tags":["Nginx"],"title":"[用Nginx點燃你的Web伺服器]-nginx教學"},{"categories":null,"contents":"game\n","permalink":"https://jayna922.github.io/contact/game/","tags":null,"title":"Game"},{"categories":["技術文章"],"contents":" 初期在開發程式時,在命名方法名稱或是命名變數名稱時, 時常煩惱不曉得如何下手命名, 自己也沒有一個規則性, 就依照當下的想法來命名, 加上經驗不足導致自己之後維護不容易需要再重新理解, 因此開始爬文各前輩分享的命名規則, 也順便將自己整理的筆記分享給大家~\n養成一個好的變數命名習慣對於程式碼的可讀性及長期維護性會產生深遠的影響。 命名雖然沒有強制性，但在開發時基本上都會依照這套規則。 主要觀念 : 可讀性 : 經由命名可以直覺的理解此命名作用,盡量避免使用過簡短或縮寫的命名,導致閱讀性不易 (少寫簡寫 / 少寫自己發明的縮寫 / 少寫語意不明的命名) 維護性 : 若閱讀性高,將來再交接或維護上也會相對容易 一致性 : 使用相同的規則命名變數 / 在不同命名上使用對應不同的命名方式 (例如:駝峰式命名法/Snake Case 命名法…) 利用註解來說明你的程式碼 主要命名規則 : 1. 駝峰命名法[小駝峰]（Camel Case）： 將多個單字連接在一起，並將每個單字的首字母小寫。\n➼ 常用場景 : 命名變數、函數、方法和屬性\n➼ 例如：myVariableName、calculateTotalAmount()、customerInfo\n2. 開頭大寫命名法[大駝峰]（Pascal Case）： 也稱為帕斯卡命名法，它將每個單詞的首字母大寫\n➼ 常用場景 : 命名類別或建構子\n➼ 例如 : MyFunctionName、BookAuthor :\nfunction MyFunctionName(name, description) { this.name = name; this.description = description; } class BookAuthor { constructor(firstName, lastName) { this.firstName = firstName; this.lastName = lastName; } } 3. 蛇底式命名法（Snake Case）： 使用下劃線來分隔單詞，通常所有字母小寫。\n➼ 常用場景 : 定義HTML和CSS類名稱(class/id)\n➼ 例如：user_profile_info\n\u0026lt;div class=\u0026#34;user_profile_info\u0026#34;\u0026gt; 4. 變化型的烤肉串式命名法 ( Kebab Case ) : 各個單詞之間使用連字符（通常是減號或破折號）分隔。\n➼ 常用場景 : 定義HTML和CSS類名稱(class/id)或URL路徑\n➼ 例如 : main-content 、user-profile\n\u0026lt;div id=\u0026#34;main-content\u0026#34;\u0026gt; user-profile/edit：URL中的路徑，用於編輯用戶個人資料。 -\u0026gt; https://example.com/user-profile/edit 5. 匈牙利命名法（Hungarian Notation）： 將變數名稱的開頭加上一個描述變數類型的前綴。\n➼ 常用場景 : 不常見\n➼ 例如：strName（表示字符串）、intCount（表示整數）\n➼ 原因 : 在JavaScript中，通常採用的是動態類型（Dynamic Typing）的方式，變數的類型不需要在變數名稱中明確指定，因此匈牙利命名法的使用變得不常見。\n6. 布林命名法（Boolean Naming）： 在變數名稱中使用布林值的描述，通常以\u0026quot;is\u0026quot;或\u0026quot;has\u0026quot;開頭。\n➼ 常用場景 : 狀態變數、權限檢查、選項開關\n➼ 例如：isOpen、hasPermission\nlet isOpen = false; // 表示彈出視窗是否打開 let hasPermission = true; // 表示用戶是否具有某種權限 若是 function返回boolean值可在前面加 check， 例如 : checkHasName()、checkIsUser()。\n7. 常量命名法（Constant Naming）： 常量通常使用全大寫字母並使用下劃線來分隔單詞。\n➼ 常用場景 : 數學和物理常數、環境變數和配置設定(.env檔)\n➼ 例如：PI 、API_BASE_URL\nconst PI = 3.14159265359; //在.env檔中的配置設定: const API_BASE_URL = \u0026#39;https://api.example.com\u0026#39;; 8. 描述性命名法（Descriptive Naming）： 這種方式的命名著重於讓變數名稱盡可能清晰地描述其用途。\n➼ 例如：counter、username、totalSales\n常用的動作詞（函數用）開頭 : 公式 : 動作 + 做什麼事 ‣ make / take 作某…事\n‣ toggle 切換 [ex : toggleStatus切換狀態]\n‣ move 移動\n‣ add 加上、相加\n‣ delete/remove 移除\n‣ update 更新\n‣ insert 單體 splice 複合體\n‣ extend append 展開\n‣ set 設定\n‣ get 獲得\n‣ print 印出\n‣ list 列出\n‣ submit 提交\n‣ reset 重置\n‣ link 連至\n‣ repeat 重覆\n‣ copy 複製\n‣ replace 取代\n‣ clean 清除\n‣ find / search 尋找\n‣ xxxxTo 到xxx\n‣ handle 處理 (適合用在change事件/監聽)\n推薦開發專案資料結構命名 : 資料夾 : 可使用小寫單詞或是小駝峰式命名 views 、 templateDesign\n檔案 : 可使用大駝峰式命名 WebService.vue 、 BaseLogger.java\n","permalink":"https://jayna922.github.io/blog/code-name-rule/","tags":["Javascript"],"title":"[用JavaScript的命名魔法：讓你的程式碼充滿活力]-變數命名規則"}]